parameter [5:0] add = 6'h20; ya
parameter [5:0] addi = 6'h08; ya
parameter [5:0] aand = 6'h24; ya
parameter [5:0] andi = 6'h0c; ya
parameter [5:0] j = 6'h02; ya
parameter [5:0] jr = 6'h18;       //No es el verdadero funct de MIPS, se cambia por ser igual al addi
parameter [5:0] lw = 6'h23; ya
parameter [5:0] nnor = 6'h27;ya
parameter [5:0] oor = 6'h25;ya
parameter [5:0] ori = 6'h0d;ya
parameter [5:0] slt = 6'h2a;ya
parameter [5:0] slti = 6'h0a;ya
parameter [5:0] sh = 6'h29;ya
parameter [5:0] sw = 6'h2b; ya
parameter [5:0] sub = 6'h22; ya


addi 001000|00000|00010|0000 0000 1111 1111| //Guardo 0xff en registro 2
addi 001000|00000|00001|0000 0000 0000 0001| //Guardo 0x01 en registro 1
add  000000|00001|00010|00011|00000|100000|  // Guardo la suma de registro 1 y 2 en 3
aand 000000|00001|00011|00100|00000|100100|  // Guardo and de registro 3 y 1 en 4
andi 001100|00100|00101|1111 1111 1111 1111| //Guardo and de registro 4 con 0xffff en 5
sw   101011|00001|00101|0000 0000 0001 0000| // Guardo contenido de registro 5 en 16($registro1)
lw   100011|00001|00110|0000 0000 0001 0000| // Cargo contenido de posicion 16($registro1) en registro 6
nnor 000000|00100|00001|00111|00000|100111|  // Guardo nor de registro 4 y 1 en 7
oor  000000|00101|00010|01000|00000|100101|  // Guardo or de registro 5 y 2 en 8
ori  001101|00110|01001|0000 1111 0000 1111| // Guardo ori de reigstro 6 con 0x0f0f en 9
slt  000000|00010|00001|01010|00000|101010|  // Guardo slt de registro 2 menor que 1 en 10
slti 001010|00101|01011|0000 0000 0000 1100| // Guardo slti de registro 5 con 0x000c en 11
sh   101001|00001|00100|0000 0000 0000 0100| // Guardo halfword de  contenido reigstro 4 en 4($registro1)
sub  000000|00101|01001|01100|00000|100010| // Guardo resta de registro 5 menos registro 9 en 12
j    000010|00 0000 0000 0000 0000 0000 0001| Salto a 1(No se si esta bien planteado)
jr   000000|00010|00001|00011|00000|011000| // Se hace un jump register al valor del registro 2
